{"file_contents":{"app.py":{"content":"# This is our main Flask application file\n# It contains all the routes (URLs) and functions for our web app\n\nimport os\nimport logging\nfrom flask import Flask, request, redirect, session, url_for\nfrom data_manager import DataManager\n\n# Set up logging to help with debugging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create our Flask app\napp = Flask(__name__)\n\n# Set secret key for sessions (used to keep users logged in)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"your-secret-key-here\")\n\n# Create our data manager to handle JSON files\ndata_manager = DataManager()\n\n# Home page - shows login options\n@app.route('/')\ndef home():\n    \"\"\"\n    This is the main page that users see first.\n    If they're logged in, send them to their dashboard.\n    If not, show them login options (admin or student).\n    \"\"\"\n    if 'user_id' in session:\n        # User is logged in, send them to their dashboard\n        user = data_manager.get_user_by_id(session['user_id'])\n        if user and user['role'] == 'admin':\n            return redirect('/admin_dashboard')\n        else:\n            return redirect('/student_dashboard')\n    else:\n        # User is not logged in, show them the main welcome page\n        return data_manager.read_html_file('templates/index.html')\n\n# Admin Login\n@app.route('/admin_login', methods=['GET', 'POST'])\ndef admin_login():\n    \"\"\"\n    This handles admin login specifically.\n    Only admin users can login here.\n    \"\"\"\n    if request.method == 'POST':\n        # Admin submitted the login form\n        username = request.form['username']\n        password = request.form['password']\n        \n        # Check if user exists and password is correct\n        user = data_manager.validate_user(username, password)\n        if user and user['role'] == 'admin':\n            # Admin login successful - save user info in session\n            session['user_id'] = user['id']\n            session['username'] = user['username']\n            session['role'] = user['role']\n            \n            # Redirect to admin dashboard\n            return redirect('/admin_dashboard')\n        else:\n            # Login failed - show error message\n            error = '<div class=\"alert alert-danger\">Invalid admin credentials or not an admin account!</div>'\n            return data_manager.read_html_file('templates/admin_login.html').replace('{{error}}', error)\n    \n    # Show admin login form (GET request)\n    return data_manager.read_html_file('templates/admin_login.html').replace('{{error}}', '')\n\n# Student Login\n@app.route('/student_login', methods=['GET', 'POST'])\ndef student_login():\n    \"\"\"\n    This handles student login specifically.\n    Only student users can login here.\n    \"\"\"\n    if request.method == 'POST':\n        # Student submitted the login form\n        username = request.form['username']\n        password = request.form['password']\n        \n        # Check if user exists and password is correct\n        user = data_manager.validate_user(username, password)\n        if user and user['role'] == 'student':\n            # Student login successful - save user info in session\n            session['user_id'] = user['id']\n            session['username'] = user['username']\n            session['role'] = user['role']\n            \n            # Redirect to student dashboard\n            return redirect('/student_dashboard')\n        else:\n            # Login failed - show error message\n            error = '<div class=\"alert alert-danger\">Invalid student credentials or not a student account!</div>'\n            return data_manager.read_html_file('templates/student_login.html').replace('{{error}}', error)\n    \n    # Show student login form (GET request)\n    return data_manager.read_html_file('templates/student_login.html').replace('{{error}}', '')\n\n# General Login (kept for compatibility)\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"\n    General login - redirects to home page to choose login type.\n    \"\"\"\n    return redirect('/')\n\n# Logout\n@app.route('/logout')\ndef logout():\n    \"\"\"\n    This logs out the user by clearing their session.\n    \"\"\"\n    session.clear()\n    return redirect('/login')\n\n# Admin Dashboard\n@app.route('/admin_dashboard')\ndef admin_dashboard():\n    \"\"\"\n    This shows the admin dashboard.\n    Only admins can access this page.\n    \"\"\"\n    if 'user_id' not in session or session.get('role') != 'admin':\n        return redirect('/login')\n    \n    return data_manager.read_html_file('templates/admin_dashboard.html')\n\n# Student Dashboard\n@app.route('/student_dashboard')\ndef student_dashboard():\n    \"\"\"\n    This shows the student dashboard.\n    Students and admins can access this page.\n    \"\"\"\n    if 'user_id' not in session:\n        return redirect('/login')\n    \n    return data_manager.read_html_file('templates/student_dashboard.html')\n\n# Schedule Management\n@app.route('/schedule', methods=['GET', 'POST'])\ndef schedule():\n    \"\"\"\n    This handles the class schedule.\n    GET request shows the schedule.\n    POST request adds a new class (admin only).\n    \"\"\"\n    if 'user_id' not in session:\n        return redirect('/login')\n    \n    if request.method == 'POST' and session.get('role') == 'admin':\n        # Admin is adding a new class\n        class_name = request.form['class_name']\n        room = request.form['room']\n        time = request.form['time']\n        day = request.form['day']\n        teacher = request.form['teacher']\n        \n        # Add the class to our schedule data\n        data_manager.add_class(class_name, room, time, day, teacher)\n    \n    # Get all scheduled classes and show them\n    classes = data_manager.get_all_classes()\n    html_content = data_manager.read_html_file('templates/schedule.html')\n    \n    # Build the schedule table\n    schedule_rows = \"\"\n    for class_info in classes:\n        schedule_rows += f\"\"\"\n        <tr>\n            <td>{class_info['day']}</td>\n            <td>{class_info['time']}</td>\n            <td>{class_info['class_name']}</td>\n            <td>{class_info['room']}</td>\n            <td>{class_info['teacher']}</td>\n        </tr>\n        \"\"\"\n    \n    html_content = html_content.replace('{{schedule_rows}}', schedule_rows)\n    \n    # Show or hide add form based on user role\n    if session.get('role') == 'admin':\n        html_content = html_content.replace('{{admin_only}}', '')\n    else:\n        html_content = html_content.replace('{{admin_only}}', 'style=\"display:none\"')\n    \n    return html_content\n\n# Attendance Management\n@app.route('/attendance', methods=['GET', 'POST'])\ndef attendance():\n    \"\"\"\n    This handles attendance tracking.\n    GET request shows attendance records.\n    POST request marks attendance (admin only).\n    \"\"\"\n    if 'user_id' not in session:\n        return redirect('/login')\n    \n    if request.method == 'POST' and session.get('role') == 'admin':\n        # Admin is marking attendance\n        student_name = request.form['student_name']\n        class_name = request.form['class_name']\n        date = request.form['date']\n        status = request.form['status']  # present or absent\n        \n        # Add attendance record\n        data_manager.mark_attendance(student_name, class_name, date, status)\n    \n    # Get all attendance records and show them\n    attendance_records = data_manager.get_attendance_records()\n    html_content = data_manager.read_html_file('templates/attendance.html')\n    \n    # Build the attendance table\n    attendance_rows = \"\"\n    for record in attendance_records:\n        status_class = \"text-success\" if record['status'] == 'present' else \"text-danger\"\n        attendance_rows += f\"\"\"\n        <tr>\n            <td>{record['date']}</td>\n            <td>{record['student_name']}</td>\n            <td>{record['class_name']}</td>\n            <td><span class=\"{status_class}\">{record['status'].title()}</span></td>\n        </tr>\n        \"\"\"\n    \n    html_content = html_content.replace('{{attendance_rows}}', attendance_rows)\n    \n    # Show or hide add form based on user role\n    if session.get('role') == 'admin':\n        html_content = html_content.replace('{{admin_only}}', '')\n    else:\n        html_content = html_content.replace('{{admin_only}}', 'style=\"display:none\"')\n    \n    return html_content\n\n# Assignments Management\n@app.route('/assignments', methods=['GET', 'POST'])\ndef assignments():\n    \"\"\"\n    This handles assignments and links repository.\n    GET request shows all assignments.\n    POST request adds new assignment (admin only).\n    \"\"\"\n    if 'user_id' not in session:\n        return redirect('/login')\n    \n    if request.method == 'POST' and session.get('role') == 'admin':\n        # Admin is adding a new assignment\n        title = request.form['title']\n        description = request.form['description']\n        due_date = request.form['due_date']\n        link = request.form['link']  # Google Drive or other cloud link\n        \n        # Add the assignment\n        data_manager.add_assignment(title, description, due_date, link)\n    \n    # Get all assignments and show them\n    assignments_list = data_manager.get_all_assignments()\n    html_content = data_manager.read_html_file('templates/assignments.html')\n    \n    # Build the assignments table\n    assignment_rows = \"\"\n    for assignment in assignments_list:\n        assignment_rows += f\"\"\"\n        <tr>\n            <td>{assignment['title']}</td>\n            <td>{assignment['description']}</td>\n            <td>{assignment['due_date']}</td>\n            <td><a href=\"{assignment['link']}\" target=\"_blank\" class=\"btn btn-sm btn-outline-primary\">Open Link</a></td>\n        </tr>\n        \"\"\"\n    \n    html_content = html_content.replace('{{assignment_rows}}', assignment_rows)\n    \n    # Show or hide add form based on user role\n    if session.get('role') == 'admin':\n        html_content = html_content.replace('{{admin_only}}', '')\n    else:\n        html_content = html_content.replace('{{admin_only}}', 'style=\"display:none\"')\n    \n    return html_content\n\n# Calendar\n@app.route('/calendar', methods=['GET', 'POST'])\ndef calendar():\n    \"\"\"\n    This shows important dates and events.\n    GET request shows the calendar.\n    POST request adds new event (admin only).\n    \"\"\"\n    if 'user_id' not in session:\n        return redirect('/login')\n    \n    if request.method == 'POST' and session.get('role') == 'admin':\n        # Admin is adding a new event\n        event_name = request.form['event_name']\n        event_date = request.form['event_date']\n        description = request.form['description']\n        \n        # Add the event\n        data_manager.add_event(event_name, event_date, description)\n    \n    # Get all events and show them\n    events = data_manager.get_all_events()\n    html_content = data_manager.read_html_file('templates/calendar.html')\n    \n    # Build the events list\n    event_items = \"\"\n    for event in events:\n        event_items += f\"\"\"\n        <div class=\"card mb-2\">\n            <div class=\"card-body\">\n                <h6 class=\"card-title\">{event['event_name']}</h6>\n                <p class=\"card-text text-muted\">Date: {event['event_date']}</p>\n                <p class=\"card-text\">{event['description']}</p>\n            </div>\n        </div>\n        \"\"\"\n    \n    html_content = html_content.replace('{{event_items}}', event_items)\n    \n    # Show or hide add form based on user role\n    if session.get('role') == 'admin':\n        html_content = html_content.replace('{{admin_only}}', '')\n    else:\n        html_content = html_content.replace('{{admin_only}}', 'style=\"display:none\"')\n    \n    return html_content\n\n# Admin Settings - Change Password\n@app.route('/admin_settings', methods=['GET', 'POST'])\ndef admin_settings():\n    \"\"\"\n    Admin can change their password here.\n    Only admin users can access this page.\n    \"\"\"\n    if 'user_id' not in session or session.get('role') != 'admin':\n        return redirect('/login')\n    \n    message = \"\"\n    if request.method == 'POST':\n        # Admin wants to change password\n        current_password = request.form['current_password']\n        new_password = request.form['new_password']\n        confirm_password = request.form['confirm_password']\n        \n        # Check if current password is correct\n        admin_user = data_manager.get_user_by_id(session['user_id'])\n        if admin_user is None or admin_user['password'] != current_password:\n            message = '<div class=\"alert alert-danger\">Current password is wrong!</div>'\n        elif new_password != confirm_password:\n            message = '<div class=\"alert alert-danger\">New passwords do not match!</div>'\n        elif len(new_password) < 6:\n            message = '<div class=\"alert alert-danger\">New password must be at least 6 characters!</div>'\n        else:\n            # Change the password\n            data_manager.change_admin_password(session['user_id'], new_password)\n            message = '<div class=\"alert alert-success\">Password changed successfully!</div>'\n    \n    # Show the settings page\n    html_content = data_manager.read_html_file('templates/admin_settings.html')\n    html_content = html_content.replace('{{message}}', message)\n    \n    return html_content\n\n# Student Registration\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"\n    Students can register here using an invite code.\n    This creates a new student account and can be accessed via admin's shared link.\n    \"\"\"\n    if request.method == 'POST':\n        # Student is trying to register\n        name = request.form['name']\n        username = request.form['username']\n        password = request.form['password']\n        confirm_password = request.form['confirm_password']\n        invite_code = request.form['invite_code']\n        \n        # Validate input fields\n        if len(name.strip()) < 2:\n            error = '<div class=\"alert alert-danger\">Name must be at least 2 characters long!</div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n        \n        if len(username.strip()) < 3:\n            error = '<div class=\"alert alert-danger\">Username must be at least 3 characters long!</div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n            \n        if len(password) < 6:\n            error = '<div class=\"alert alert-danger\">Password must be at least 6 characters long!</div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n        \n        # Check if passwords match\n        if password != confirm_password:\n            error = '<div class=\"alert alert-danger\">Passwords do not match!</div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n        \n        # Check if the invite code is correct\n        if invite_code != \"JOIN2024\":  # Simple invite code\n            error = '<div class=\"alert alert-danger\">Invalid invite code! Ask your teacher for the correct code: <strong>JOIN2024</strong></div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n        \n        # Check if username already exists\n        if data_manager.username_exists(username.strip()):\n            error = '<div class=\"alert alert-danger\">Username already exists! Please choose a different one.</div>'\n            return data_manager.read_html_file('templates/register.html').replace('{{error}}', error)\n        \n        # Create new student account\n        data_manager.add_student(name.strip(), username.strip(), password)\n        success = '<div class=\"alert alert-success\"><strong>Account created successfully!</strong><br>You can now <a href=\"/student_login\" class=\"alert-link\">login here</a> with your username and password.</div>'\n        return data_manager.read_html_file('templates/register.html').replace('{{error}}', success)\n    \n    # Show registration form with pre-filled invite code if coming from admin link\n    invite_code = request.args.get('code', '')  # Get invite code from URL if present\n    html_content = data_manager.read_html_file('templates/register.html')\n    html_content = html_content.replace('{{error}}', '')\n    html_content = html_content.replace('{{invite_code}}', invite_code)\n    return html_content\n\n# Get Invite Link (Admin only)\n@app.route('/invite_link')\ndef invite_link():\n    \"\"\"\n    Shows the invite link that admin can share with students.\n    Only admin can access this.\n    \"\"\"\n    if 'user_id' not in session or session.get('role') != 'admin':\n        return redirect('/admin_login')\n    \n    # Get the current website URL and create invite link\n    base_url = request.host_url  # Gets the website's main URL\n    invite_url = base_url + \"register\"\n    invite_url_with_code = base_url + \"register?code=JOIN2024\"  # Pre-filled code\n    invite_code = \"JOIN2024\"\n    \n    html_content = data_manager.read_html_file('templates/invite_link.html')\n    html_content = html_content.replace('{{invite_url}}', invite_url)\n    html_content = html_content.replace('{{invite_url_with_code}}', invite_url_with_code)\n    html_content = html_content.replace('{{invite_code}}', invite_code)\n    \n    return html_content\n","size_bytes":17153},"data_manager.py":{"content":"# DATA MANAGER - This handles all our data storage\n# \n# What does this do?\n# - Saves information to files (like a simple database)\n# - Reads information from files\n# - JSON files are just text files that store data in an organized way\n# - Think of JSON like a digital filing cabinet with labeled folders\n\nimport json\nimport os\nfrom datetime import datetime\n\nclass DataManager:\n    \"\"\"\n    This class manages all our data stored in JSON files.\n    JSON files are just text files that store data in an organized way.\n    Think of them like spreadsheets but in text format.\n    \"\"\"\n    \n    def __init__(self):\n        \"\"\"\n        Initialize the data manager.\n        This runs when we create a DataManager object.\n        It makes sure all our data folders and files exist.\n        \"\"\"\n        # Create data directory if it doesn't exist\n        if not os.path.exists('data'):\n            os.makedirs('data')\n        \n        # Initialize all our data files\n        self.init_users()\n        self.init_schedules()\n        self.init_attendance()\n        self.init_assignments()\n        self.init_events()\n    \n    def read_json_file(self, filename):\n        \"\"\"\n        Read data from a JSON file.\n        JSON files store data like a Python dictionary or list.\n        If the file doesn't exist, return an empty list.\n        \"\"\"\n        try:\n            with open(filename, 'r') as file:\n                # Load the data from the file\n                return json.load(file)\n        except FileNotFoundError:\n            # File doesn't exist, return empty list\n            return []\n        except json.JSONDecodeError:\n            # File is corrupted, return empty list\n            return []\n    \n    def write_json_file(self, filename, data):\n        \"\"\"\n        Write data to a JSON file.\n        This saves our Python data (lists, dictionaries) to a text file.\n        indent=4 makes the file human-readable with nice formatting.\n        \"\"\"\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=4)\n    \n    def read_html_file(self, filename):\n        \"\"\"\n        Read an HTML file and return its content.\n        This is used because we can't use Jinja templates.\n        \"\"\"\n        try:\n            with open(filename, 'r') as file:\n                return file.read()\n        except FileNotFoundError:\n            return \"<html><body><h1>File not found</h1></body></html>\"\n    \n    def init_users(self):\n        \"\"\"\n        Initialize the users data file.\n        This creates default admin and student accounts if they don't exist.\n        \"\"\"\n        users_file = 'data/users.json'\n        users = self.read_json_file(users_file)\n        \n        if not users:  # If no users exist, create default ones\n            default_users = [\n                {\n                    'id': 1,\n                    'username': 'admin',\n                    'password': 'admin123',  # In real apps, this should be encrypted\n                    'role': 'admin',\n                    'name': 'Administrator'\n                },\n                {\n                    'id': 2,\n                    'username': 'student1',\n                    'password': 'student123',\n                    'role': 'student',\n                    'name': 'John Doe'\n                }\n            ]\n            self.write_json_file(users_file, default_users)\n    \n    def init_schedules(self):\n        \"\"\"\n        Initialize the schedules data file.\n        This creates the file to store class schedules.\n        \"\"\"\n        schedules_file = 'data/schedules.json'\n        if not os.path.exists(schedules_file):\n            self.write_json_file(schedules_file, [])\n    \n    def init_attendance(self):\n        \"\"\"\n        Initialize the attendance data file.\n        This creates the file to store attendance records.\n        \"\"\"\n        attendance_file = 'data/attendance.json'\n        if not os.path.exists(attendance_file):\n            self.write_json_file(attendance_file, [])\n    \n    def init_assignments(self):\n        \"\"\"\n        Initialize the assignments data file.\n        This creates the file to store assignments and links.\n        \"\"\"\n        assignments_file = 'data/assignments.json'\n        if not os.path.exists(assignments_file):\n            self.write_json_file(assignments_file, [])\n    \n    def init_events(self):\n        \"\"\"\n        Initialize the events data file.\n        This creates the file to store calendar events.\n        \"\"\"\n        events_file = 'data/events.json'\n        if not os.path.exists(events_file):\n            self.write_json_file(events_file, [])\n    \n    def validate_user(self, username, password):\n        \"\"\"\n        Check if a user's login is valid.\n        Returns the user data if valid, None if invalid.\n        \"\"\"\n        users = self.read_json_file('data/users.json')\n        for user in users:\n            if user['username'] == username and user['password'] == password:\n                return user\n        return None\n    \n    def get_user_by_id(self, user_id):\n        \"\"\"\n        Find a user by their ID number.\n        Returns the user data if found, None if not found.\n        \"\"\"\n        users = self.read_json_file('data/users.json')\n        for user in users:\n            if user['id'] == user_id:\n                return user\n        return None\n    \n    def add_class(self, class_name, room, time, day, teacher):\n        \"\"\"\n        Add a new class to the schedule.\n        This adds a new row to our schedule data.\n        \"\"\"\n        schedules = self.read_json_file('data/schedules.json')\n        \n        # Create a new class entry\n        new_class = {\n            'id': len(schedules) + 1,  # Simple ID assignment\n            'class_name': class_name,\n            'room': room,\n            'time': time,\n            'day': day,\n            'teacher': teacher,\n            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        # Add to our list and save\n        schedules.append(new_class)\n        self.write_json_file('data/schedules.json', schedules)\n    \n    def get_all_classes(self):\n        \"\"\"\n        Get all scheduled classes.\n        Returns a list of all classes in the schedule.\n        \"\"\"\n        return self.read_json_file('data/schedules.json')\n    \n    def mark_attendance(self, student_name, class_name, date, status):\n        \"\"\"\n        Record attendance for a student.\n        Status can be 'present' or 'absent'.\n        \"\"\"\n        attendance = self.read_json_file('data/attendance.json')\n        \n        # Create a new attendance record\n        new_record = {\n            'id': len(attendance) + 1,\n            'student_name': student_name,\n            'class_name': class_name,\n            'date': date,\n            'status': status,\n            'recorded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        # Add to our list and save\n        attendance.append(new_record)\n        self.write_json_file('data/attendance.json', attendance)\n    \n    def get_attendance_records(self):\n        \"\"\"\n        Get all attendance records.\n        Returns a list of all attendance records.\n        \"\"\"\n        return self.read_json_file('data/attendance.json')\n    \n    def add_assignment(self, title, description, due_date, link):\n        \"\"\"\n        Add a new assignment to the repository.\n        Link can be a Google Drive link or any other cloud storage.\n        \"\"\"\n        assignments = self.read_json_file('data/assignments.json')\n        \n        # Create a new assignment entry\n        new_assignment = {\n            'id': len(assignments) + 1,\n            'title': title,\n            'description': description,\n            'due_date': due_date,\n            'link': link,\n            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        # Add to our list and save\n        assignments.append(new_assignment)\n        self.write_json_file('data/assignments.json', assignments)\n    \n    def get_all_assignments(self):\n        \"\"\"\n        Get all assignments.\n        Returns a list of all assignments and their links.\n        \"\"\"\n        return self.read_json_file('data/assignments.json')\n    \n    def add_event(self, event_name, event_date, description):\n        \"\"\"\n        Add a new event to the calendar.\n        Events are important dates like exams, holidays, etc.\n        \"\"\"\n        events = self.read_json_file('data/events.json')\n        \n        # Create a new event entry\n        new_event = {\n            'id': len(events) + 1,\n            'event_name': event_name,\n            'event_date': event_date,\n            'description': description,\n            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        # Add to our list and save\n        events.append(new_event)\n        self.write_json_file('data/events.json', events)\n    \n    def get_all_events(self):\n        \"\"\"\n        Get all calendar events.\n        Returns a list of all events sorted by date.\n        \"\"\"\n        events = self.read_json_file('data/events.json')\n        # Sort events by date (most recent first)\n        return sorted(events, key=lambda x: x['event_date'], reverse=True)\n    \n    def change_admin_password(self, user_id, new_password):\n        \"\"\"\n        Change admin's password.\n        This updates the admin's password in the users file.\n        \"\"\"\n        users = self.read_json_file('data/users.json')\n        \n        # Find the admin user and update password\n        for user in users:\n            if user['id'] == user_id and user['role'] == 'admin':\n                user['password'] = new_password\n                break\n        \n        # Save the updated users list\n        self.write_json_file('data/users.json', users)\n    \n    def username_exists(self, username):\n        \"\"\"\n        Check if a username already exists.\n        Returns True if username exists, False if it doesn't.\n        \"\"\"\n        users = self.read_json_file('data/users.json')\n        \n        # Check each user to see if username matches\n        for user in users:\n            if user['username'] == username:\n                return True\n        return False\n    \n    def add_student(self, name, username, password):\n        \"\"\"\n        Add a new student to the system.\n        This creates a new student account.\n        \"\"\"\n        users = self.read_json_file('data/users.json')\n        \n        # Create new student account\n        new_student = {\n            'id': len(users) + 1,  # Simple ID assignment\n            'username': username,\n            'password': password,\n            'role': 'student',\n            'name': name,\n            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        }\n        \n        # Add to our users list and save\n        users.append(new_student)\n        self.write_json_file('data/users.json', users)\n","size_bytes":10844},"main.py":{"content":"# This is the MAIN starting file for our classroom scheduler\n# Think of this as pressing the \"START\" button for our website\n# It tells Python to run our web application\n\n# Import our Flask app from the app.py file\nfrom app import app\n\n# This only runs when we start this file directly\nif __name__ == '__main__':\n    # Start our web server\n    # host='0.0.0.0' - lets anyone access our website\n    # port=5000 - our website will be available at :5000\n    # debug=True - shows us helpful error messages\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":552},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.3.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.2\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n]\n","size_bytes":376},"replit.md":{"content":"# Overview\n\nA classroom management web application built with Flask that provides scheduling, attendance tracking, and assignment management features. The system supports role-based access with separate dashboards for administrators and students. Administrators can manage schedules, track attendance, create assignments, and organize events, while students have read-only access to view their information.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Web Framework\n- **Flask**: Lightweight Python web framework chosen for its simplicity and ease of learning\n- **Session-based Authentication**: Uses Flask sessions with a secret key for user login state management\n- **Role-based Access Control**: Implements admin and student roles with different permission levels\n\n## Frontend Architecture\n- **Server-side Rendering**: Uses Jinja2 templating engine with HTML templates\n- **Bootstrap CSS Framework**: Provides responsive design and consistent UI components\n- **Static Assets**: Custom CSS for additional styling stored in `/static` directory\n- **Responsive Design**: Mobile-friendly interface using Bootstrap's grid system\n\n## Data Storage\n- **JSON File-based Storage**: Uses local JSON files instead of a traditional database\n- **File Structure**: Separate JSON files for users, schedules, attendance, assignments, and events\n- **Data Manager Pattern**: Centralized `DataManager` class handles all file I/O operations\n- **Error Handling**: Graceful handling of missing or corrupted JSON files\n\n## Application Structure\n- **MVC Pattern**: Clear separation with routes in `app.py`, data logic in `data_manager.py`, and views in templates\n- **Module Organization**: Main application logic separated from server startup (`main.py`)\n- **Template Inheritance**: Consistent layout across pages using shared navigation and styling\n\n## Security Considerations\n- **Environment Variables**: Session secret key configurable via environment variables\n- **Form-based Authentication**: Simple username/password authentication\n- **Session Management**: Server-side session storage for user state\n\n## User Interface Design\n- **Dual Dashboard System**: Separate interfaces for admin and student roles\n- **CRUD Operations**: Full create, read, update, delete functionality for admin users\n- **Read-only Access**: Students can view but not modify data\n- **Navigation Consistency**: Shared navigation bar across all authenticated pages\n\n# External Dependencies\n\n## Frontend Libraries\n- **Bootstrap CSS**: Dark theme variant hosted on CDN for styling and responsive layout\n- **Custom CSS**: Local stylesheet for application-specific styling overrides\n\n## Python Packages\n- **Flask**: Core web framework for routing, templating, and session management\n- **Standard Library**: Uses built-in `json`, `os`, `datetime`, and `logging` modules\n\n## Development Tools\n- **Debug Mode**: Flask development server with debugging enabled\n- **Logging**: Python logging module for debugging and error tracking\n- **Port Configuration**: Runs on port 5000 with external access enabled\n\n## Data Storage\n- **Local File System**: JSON files stored in `/data` directory for persistence\n- **No External Database**: Self-contained storage solution requiring no additional services","size_bytes":3298},"static/style.css":{"content":"/* \n   SIMPLE CSS STYLES for Classroom Scheduler\n   \n   What is CSS? It makes our website look pretty!\n   Think of HTML as the skeleton and CSS as the clothes and makeup\n   \n   How to read CSS:\n   selector { property: value; }\n   \n   Example: body { color: red; } \n   This makes all text in the body red\n*/\n\n/* Body styling - makes the whole page look nice */\nbody {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f8f9fa;  /* Very light gray background */\n    color: #212529;  /* Dark text for easy reading */\n}\n\n/* Container spacing - add some breathing room */\n.container {\n    margin-top: 20px;\n    margin-bottom: 20px;\n}\n\n/* Card styling - makes cards look clean and modern */\n.card {\n    border-radius: 8px;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n    margin-bottom: 20px;\n    background-color: white;  /* Pure white cards */\n    border: 1px solid #e0e0e0;  /* Light border */\n}\n\n.card-header {\n    font-weight: bold;\n    border-bottom: 1px solid #dee2e6;\n    background-color: #87ceeb;  /* Light sky blue header */\n    color: white;\n    border-radius: 8px 8px 0 0;\n}\n\n/* Button styling - makes buttons look modern */\n.btn {\n    border-radius: 5px;\n    padding: 8px 16px;\n    text-decoration: none;\n    display: inline-block;\n    margin: 2px;\n    font-weight: 500;\n}\n\n/* Primary buttons - sky blue */\n.btn-primary {\n    background-color: #87ceeb !important;\n    border-color: #87ceeb !important;\n    color: black !important;\n}\n\n.btn-primary:hover {\n    background-color: #5fb3d4 !important;\n    border-color: #5fb3d4 !important;\n    color: white !important;\n}\n\n/* Success buttons - light green */\n.btn-success {\n    background-color: #90ee90 !important;\n    border-color: #90ee90 !important;\n    color: black !important;\n}\n\n.btn-success:hover {\n    background-color: #7dd87d !important;\n    border-color: #7dd87d !important;\n    color: white !important;\n}\n\n/* Table styling - make tables easier to read */\n.table {\n    margin-bottom: 0;\n}\n\n.table th {\n    font-weight: bold;\n    text-transform: uppercase;\n    font-size: 0.9em;\n    letter-spacing: 0.5px;\n}\n\n.table td, .table th {\n    padding: 12px;\n    vertical-align: middle;\n}\n\n/* Navigation bar styling - clean and modern */\n.navbar {\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.navbar-brand {\n    font-weight: bold;\n    font-size: 1.3em;\n    color: white !important;\n}\n\n.nav-link {\n    color: white !important;\n    font-weight: 500;\n}\n\n.nav-link:hover {\n    color: #f0f8ff !important;\n}\n\n/* Form styling - make forms look clean */\n.form-label {\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n\n.form-control {\n    border-radius: 4px;\n    padding: 10px;\n    margin-bottom: 10px;\n}\n\n/* Alert styling - beautiful and clear alerts */\n.alert {\n    border-radius: 8px;\n    padding: 15px;\n    margin: 15px 0;\n    border: 1px solid;\n}\n\n.alert-info {\n    background-color: #e3f2fd !important;\n    border-color: #87ceeb !important;\n    color: #1565c0 !important;\n}\n\n.alert-success {\n    background-color: #f1f8e9 !important;\n    border-color: #90ee90 !important;\n    color: #2e7d32 !important;\n}\n\n.alert-danger {\n    background-color: #ffebee !important;\n    border-color: #ffcdd2 !important;\n    color: #c62828 !important;\n}\n\n.alert h6 {\n    margin-top: 0;\n    font-weight: bold;\n}\n\n.alert ul {\n    margin-bottom: 0;\n}\n\n/* Dashboard cards - make them look appealing */\n.card-body.text-center {\n    padding: 30px 20px;\n}\n\n.card-title {\n    font-size: 1.2em;\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.card-text {\n    margin-bottom: 20px;\n    color: #6c757d;\n}\n\n/* Responsive design - make it work on mobile */\n@media (max-width: 768px) {\n    .container {\n        margin-top: 10px;\n        padding: 0 15px;\n    }\n    \n    .card-body.text-center {\n        padding: 20px 15px;\n    }\n    \n    .table-responsive {\n        font-size: 0.9em;\n    }\n}\n\n/* Status colors for attendance - clear and visible */\n.text-success {\n    color: #006400 !important;  /* Dark green for better visibility */\n    font-weight: bold;\n    background-color: #f0fff0;\n    padding: 2px 6px;\n    border-radius: 3px;\n}\n\n.text-danger {\n    color: #8b0000 !important;  /* Dark red for better visibility */\n    font-weight: bold;\n    background-color: #fff5f5;\n    padding: 2px 6px;\n    border-radius: 3px;\n}\n\n/* Login page styling */\n.login-container {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n/* Empty state styling */\n.text-muted {\n    color: #6c757d;\n}\n\n/* List styling in alerts */\n.alert li {\n    margin-bottom: 5px;\n}\n\n/* Make buttons more accessible */\n.btn:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(0,0,0,0.2);\n    transition: all 0.2s ease;\n}\n\n/* Form validation feedback */\n.form-text {\n    font-size: 0.875em;\n    margin-top: 5px;\n}\n\n/* Dashboard welcome section */\n.text-muted {\n    font-size: 1.1em;\n    margin-bottom: 30px;\n}\n\n/* Calendar events styling - sky blue accent */\n.card.mb-2 {\n    border-left: 4px solid #87ceeb;\n}\n\n.card.mb-2 .card-title {\n    color: #4682b4;\n    font-size: 1.1em;\n}\n\n/* Navigation links */\n.nav-link:hover {\n    background-color: rgba(255,255,255,0.1);\n    border-radius: 4px;\n}\n\n/* Table styling - clean and readable */\n.table {\n    background-color: white;\n}\n\n.table-striped tbody tr:hover {\n    background-color: #e3f2fd !important;  /* Light blue hover */\n}\n\n.table thead th {\n    background-color: #87ceeb;\n    color: white;\n    border: none;\n}\n\n/* Loading states and transitions - smooth animations */\n.card, .btn, .alert {\n    transition: all 0.3s ease;\n}\n\n/* Form styling - clean and modern forms */\n.form-control {\n    border: 2px solid #e0e0e0;\n    border-radius: 5px;\n    background-color: white;\n}\n\n.form-control:focus {\n    border-color: #87ceeb !important;\n    box-shadow: 0 0 0 0.2rem rgba(135, 206, 235, 0.25) !important;\n}\n\n/* Main page background gradient - subtle and beautiful */\nbody {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e3f2fd 100%);\n    min-height: 100vh;\n}\n\n/* Print styles - make it printer friendly */\n@media print {\n    .navbar, .btn, form {\n        display: none !important;\n    }\n    \n    .card {\n        border: 1px solid #000 !important;\n        box-shadow: none !important;\n    }\n}\n","size_bytes":6262}},"version":1}